package pattern;

/**
 * 
 * @author zhangyong
 *
 */
public interface Principle {

	/**
	 * 1.开-闭原则(Open-Closed Principle,OCP):
	 * 一个软件实体应当对扩展开发,对修改关闭.说的是,再设计一个模块的时候,应当使这个模块可以在不被修改的前提下被扩展
	 * .换言之,应当可以在不必修改源代码的情况下改变这个模块的行为
	 * ，在保持系统一定稳定性的基础上，对系统进行扩展。这是面向对象设计（OOD）的基石，也是最重要的原则。
	 * 
	 * 2.里氏代换原则(Liskov Substitution Principle,常缩写为.LSP)
	 * 严格表达:一个软件实体如果使用的是一个基类的话,那么一定适用于其子类,而且它根本不能察觉出基类对象和子类对象的区别
	 * .只有衍生类可以替换基类，软件单位的功能才能不受影响，基类才能真正被复用，而衍生类也能够在基类的基础上增加新功能； 
	 * 
	 * 反过来的代换不成立；
	 * 
	 * 应当尽量从抽象类继承,而不从具体类继承；
	 * 
	 * 3.依赖倒置原则(Dependence Inversion Principle),要求客户端依赖于抽象耦合.
	 * 表述:抽象不应当依赖于细节,细节应当依赖于抽象.(Program to an interface, not an implementaction)
	 * 
	 * 4.接口隔离原则(Interface Segregation Principle, ISP) 
	 * 一个类对另外一个类的依赖是建立在最小的接口上。
	 * 
	 * 使用多个专门的接口比使用单一的总接口要好.根据客户需要的不同,而为不同的客户端提供不同的服务是一种应当得到鼓励的做法.就像"看人下菜碟"一样,
	 * 要看客人是谁,再提供不同档次的饭菜.
	 * 
	 * 胖接口会导致他们的客户程序之间产生不正常的并且有害的耦合关系.当一个客户程序要求该胖接口进行一个改动时,
	 * 会影响到所有其他的客户程序.因此客户程序应该仅仅依赖他们实际需要调用的方法.
	 * 
	 * 5.合成/聚合复用原则(Composite/Aggregate Reuse Principle,CARP)
	 * 在一个新的对象里面使用一些已有的对象,使之成为新对象的一部分;新的对象通过这些向对象的委派达到复用已有功能的目的.这个设计原则有另一个简短的表述:要尽量使用合成/聚合,尽量不要使用继承.
	 * 
	 * 6.迪米特法则(Law of Demeter LoD)又叫做最少知识原则(Least Knowledge Principle,LKP)
	 * 一个对象应当对其他对象有尽可能少的了了解.
	 * (1)只与你直接的朋友们通信(Only talk to your immediate friends) 
	 * (2)不要跟"陌生人"说话(Don't talk to strangers)
	 * (3)每一个软件单位对其他的单位都只有最少的知识,而且局限于那些本单位密切相关的软件单位.
	 * 
	 * 7.单一职责原则(Simple responsibility pinciple SRP)
	 * 就一个类而言,应该仅有一个引起它变化的原因,如果你能想到多于一个的动机去改变一个类
	 * ,那么这个类就具有多于一个的职责.应该把多于的指责分离出去,分别再创建一些类来完成每一个职责.
	 */
}
